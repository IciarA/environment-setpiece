#define WATER_DEPTH 2.1
#define DRAG_MULT 0.048
#define ITERATIONS_RAYMARCH 13
#define EPSILON 0.01


float rand(vec2 p) {
  return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
}


// From: https://www.shadertoy.com/view/4ttSWf
float hash1( vec2 p )
{
    p  = 50.0*fract( p*0.3183099 );
    return fract( p.x*p.y*(p.x+p.y) );
}


float noise( in vec2 x )
{
    vec2 p = floor(x);
    vec2 w = fract(x);
    vec2 u = w*w*w*(w*(w*6.0-15.0)+10.0);

    float a = hash1(p+vec2(0,0));
    float b = hash1(p+vec2(1,0));
    float c = hash1(p+vec2(0,1));
    float d = hash1(p+vec2(1,1));


    return -1.0+2.0*( a + (b-a)*u.x + (c-a)*u.y + (a - b - c + d)*u.x*u.y );
}



float fbm3 (vec2 p) {
    // Initialize the variables to be used
    p.x = p.x - 0.5; // Move mountain
    p.y = p.y - 0.5; // Move mountain
    float total = 0.0;
    float amplitude = 0.5;
    int octaves = 12;

    //p *= 1.6;

    // For loop that interates through octaves
    for (int i = 0; i < octaves; i++) {
        total += amplitude * noise(p);
        p *= 1.5;
        amplitude *= .5;
        //p = 1.1 * m2 * p; // Achieve more irregularities and rockiness
    }

    return total;
}




vec2 random(vec2 p) {
    return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);
}
// Worley noise
float worley(vec2 pos) {
  // The dimensions of the cell division, based on the dimensions of the screen.
  float m = 2.1;
  float n = 2.1;

  // The cell where the current point is
  vec2 p = vec2(floor((pos.x) * m), floor((pos.y) * n));
  //vec2 p = pos;
  // The random point within that cell
  vec2 randVec = p + random(p);

  // Variables to keep track of the closest random point to the current point and their distance
  vec2 final_point = randVec;
  vec2 curr_rand = randVec;
  float dist = 999999.00;
  float dist2 = 999999.00;
  float dist3 = 999999.00;

  float result = 0.0;

  // Worley Noise
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      float i_float = float(i);
      float j_float = float(j);
      // Random point at the current cell.
      curr_rand = vec2(p[0] + i_float - 1.0, p[1] + j_float - 1.0) + random(vec2 (p[0] + i_float - 1.0, p[1] + j_float - 1.0));
      // Distance from random point to current point.
      float curr_dist = sqrt(pow((pos.x) * m - curr_rand[0], 2.0) + pow((pos.y) * n - curr_rand[1], 2.0));
      // If the distance is smaller than previous distance, store that distance and the current random point.
      if (curr_dist < dist) {
        dist2 = dist;
        dist = curr_dist;
        final_point = curr_rand;
      }
      else if (curr_dist < dist2) {
        dist3 = dist2;
        dist2 = curr_dist;
      }
      else if (curr_dist < dist3) {
        dist3 = curr_dist;
      }
    }
  }

  result = -dist + dist2;
  result = pow(clamp(result, 0.1, 0.9) - 0.1, 0.5);


  return result;
}






// value noise, and its analytical derivatives
vec3 noised2( in vec2 x )
{
    vec2 f = fract(x);
    vec2 u = f*f*(3.0-2.0*f);

    vec2 p = vec2(floor(x));
    float a = rand((p+vec2(0,0)));
	float b = rand((p+vec2(1,0)));
	float c = rand((p+vec2(0,1)));
	float d = rand((p+vec2(1,1)));

	return vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,
				6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));
}



const mat2 m = mat2(0.8,-0.6,0.6,0.8);

float baseFbm( in vec2 p )
{
    float a = 0.0;
    float b = 1.0;
    vec2  d = vec2(0.0);
    for( int i=0; i<15; i++ )
    {
        vec3 n=noised2(p);
        d +=n.yz;
        a +=b*n.x/(1.0+dot(d,d));
        b *=0.5;
        p=m*p*2.0;
    }
    return a;
}


float fbm5(vec2 p) {
    // Initialize the variables to be used
    float total = 0.0;
    float amplitude = 0.5;
    int octaves = 12;


    // For loop that interates through octaves
    for (int i = 0; i < octaves; i++) {
        total += amplitude * worley(p);
        p *= 1.5;
        amplitude *= .7;
        //p = 1.1 * m2 * p; // Achieve more irregularities and rockiness
    }

    return total;
}






// Transformation functions
vec3 rotX(vec3 p, float x) {
  x = radians(x);
  float c = cos(x);
  float s = sin(x);
  return vec3(p.x, c*p.y-s*p.z, s*p.y+c*p.z);
}

vec3 rotY(vec3 p, float y) {
  y = radians(y);
  float c = cos(y);
  float s = sin(y);
  return vec3(c*p.x+s*p.z, p.y, -s*p.x+c*p.z);
}

vec3 rotZ(vec3 p, float z) {
  z = radians(z);
  float c = cos(z);
  float s = sin(z);
  return vec3(c*p.x-s*p.y, s*p.x+c*p.y, p.z);
}



// SDFs from http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
float sdSphere( vec3 p, float s )
{
  return length(p) - s;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}


float dot2(in vec2 v ) {return dot(v,v);}

float sdCappedCone( vec3 p, float h, float r1, float r2 )
{
  vec2 q = vec2( length(p.xz), p.y );
  vec2 k1 = vec2(r2,h);
  vec2 k2 = vec2(r2-r1,2.0*h);
  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);
  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );
  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
  return s*sqrt( min(dot2(ca),dot2(cb)) );
}

float sdTorus( vec3 p, vec2 t )
{
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}

float opSmoothSubtraction( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h);
}

float opSmoothUnion( float d1, float d2, float k ) {
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}


// SDF for the lighthouse
vec2 sdfLighthouse(vec3 p) {
    vec2 result = vec2( 1e11, 0.0 );

	float cone = sdCappedCone((p + vec3(0.0, -0.40, 0.0)), 0.05, 0.3, 0.29);
    if (cone < result.x) {
        result.x = cone;
        result.y = 0.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -0.78, 0.0)), 0.33, 0.29, 0.24);
    if (cone < result.x) {
        result.x = cone;
        result.y = 1.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -1.33, 0.0)), 0.25, 0.24, 0.20);
    if (cone < result.x) {
        result.x = cone;
        result.y = 0.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -1.78, 0.0)), 0.25, 0.20, 0.16);
    if (cone < result.x) {
        result.x = cone;
        result.y = 1.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -2.05, 0.0)), 0.01, 0.26, 0.26);
    if (cone < result.x) {
        result.x = cone;
        result.y = 0.0;
    }

    float post = sdCappedCone((p + vec3(-0.25, -2.11, 0.0)), 0.03, 0.0001, 0.0001);

    if (post < result.x) {
     	result.x = post;
        result.y = 0.0;
    }

    post = sdCappedCone((p + vec3(-0.18, -2.11, -0.15)), 0.03, 0.0001, 0.0001);

    if (post < result.x) {
     	result.x = post;
        result.y = 0.0;
    }

    post = sdCappedCone((p + vec3(-0.05, -2.11, -0.24)), 0.03, 0.0001, 0.0001);

    if (post < result.x) {
     	result.x = post;
        result.y = 0.0;
    }

    post = sdCappedCone((p + vec3(0.13, -2.11, -0.21)), 0.03, 0.0001, 0.0001);

    if (post < result.x) {
     	result.x = post;
        result.y = 0.0;
    }

    post = sdCappedCone((p + vec3(0.245, -2.10, 0.01)), 0.03, 0.0001, 0.0001);

    if (post < result.x) {
     	result.x = post;
        result.y = 0.0;
    }

    float torus = sdTorus((p + vec3(0.0, -2.14, 0.0)), vec2(0.25, 0.001));
    if (torus < result.x) {
    	result.x = torus;
        result.y = 0.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -2.08, 0.0)), 0.1, 0.15, 0.14);
    if (cone < result.x) {
        result.x = cone;
        result.y = 0.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -2.28, 0.0)), 0.1, 0.15, 0.16);
    if (cone < result.x) {
        result.x = cone;
        result.y = 2.0;
    }

    cone = sdCappedCone((p + vec3(0.0, -2.43, 0.0)), 0.08, 0.22, 0.01);

    float sphere = sdSphere(p + vec3(0.0, -2.55, 0.0), 0.025);

    float top = opSmoothUnion(cone, sphere, 0.02);
    if (top < result.x) {
        result.x = top;
        result.y = 0.0;
    }



    return result;
}



vec2 sdfLighthouseLight(vec3 p) {

    vec2 result = vec2( 1e11, 0.0 );

    float sphere = sdSphere(p + vec3(6.8, -1.3, 1.5), 1.5);

    if (sphere < result.x) {
     	result.x = sphere;
        result.y = 1.0;
    }


    return result;
}




// Ocean based on: https://www.shadertoy.com/view/MdXyzX
vec2 waveDx(vec2 pos, vec2 dir, float speed, float freq) {
    float x = dot(dir, pos) * freq + iTime * speed;
    float wave = exp(sin(x) - 2.0); // Subtract by higher number for less steep waves
    float dx = wave * cos(x);
    return vec2(wave, -dx);
}

float fbmWater(vec2 pos) {
    pos = pos * 1.3; //This will make the waves more/less spread out
    float iter = 0.0;
    float phase = 6.0;
    float speed = 2.0;
    float weight = 1.0;
    float w = 0.0;
    float ws = 0.0;
    for (int i = 0; i < 13; i++) {
        vec2 p = vec2(sin(iter), cos(iter));
        vec2 res = waveDx(pos, p, speed, phase);
        pos += normalize(p) * res.y * weight * DRAG_MULT;
        w += res.x * weight;
        iter += 12.0;
        ws += weight;
        weight = mix(weight, 0.0, 0.2); //The mix value creates the separation of the waves
        phase *= 1.18; // How chopy the water is (lower value = smoother, higher value = choppier)
        speed *= 1.07; // Speed of the waves
    }

    return w / ws;
}




// Ray marching
// Based on: https://www.shadertoy.com/view/Xds3zN
vec2 map(vec3 pos) {
    vec2 result = vec2( 1e10, 0.0 );

    float box = sdBox(rotY(pos + vec3(-2.4, -1.4, -0.2), -30.5), vec3(0.4, 1.1, 0.7));

    if (box >= result.x) {
    	return result;
    }

    vec2 lighthouse = sdfLighthouse(rotZ(pos + vec3(-2.6, 0.0, -0.2), -5.5) / 0.9);
    lighthouse.x = lighthouse.x * 0.9;

    // Make surface of the lighthouse less smooth
    float pat = fbm5(pos.xy);

    lighthouse.x = mix(lighthouse.x, lighthouse.x * pat, 0.4);

    // Warped fbm
    vec2 q2 = vec2( fbm5( pos.xy + vec2(0.0,0.0) ), fbm5( pos.xy + vec2(5.2,1.3) ) );

    float f = fbm5( pos.xy + 3.0*q2 );
    lighthouse.x = mix(lighthouse.x, lighthouse.x * f, 0.1);

    if (lighthouse.x < result.x) {
        result.x = lighthouse.x - 0.01;
        result.y = lighthouse.y;
    }

    return result;
}


vec2 mapLight(vec3 pos) {
    vec2 result = vec2( 1e10, 0.0 );

    vec2 lighthouse = sdfLighthouseLight(rotZ(pos + vec3(-2.6, 0.0, -0.2), -5.5) / 0.9);
    lighthouse.x = lighthouse.x * 0.9;
    if (lighthouse.x < result.x) {
        result.x = lighthouse.x - 0.01;
        result.y = lighthouse.y;
    }

    return result;
}


vec2 mapWater(vec3 pos) {
    float h = pos.y - clamp(-0.2, 0.1, fbmWater(pos.xz) - 0.2);
    return vec2(h, 2.0);
}

vec2 mapTerrain(vec3 pos) {
    float h = pos.y - fbm3(vec2(pos.x, pos.z - 1.0) * 0.6) * 1.5;
    return vec2(h, 3.0);
}


// Lighthouse ray cast
vec2 rayCast(vec3 orig, vec3 dir) {
    vec2 result = vec2(-1.0, -1.0);
    float tmin = 1.0;
    float tmax = 20.0;

    float t = tmin;
    for (int i = 0; i < 70 && t < tmax; i++) {
        vec3 pos = orig + dir * t;
        vec2 isect = map(pos);
        if (isect.x < 0.0001) {
            result = vec2(t, isect.y);
            break;
        }
        t += isect.x;
    }

    return result;
}

// From: https://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm
// Soft shadows by using how close shadow ray was to hitting the lighthouse
float rayCastShadow(vec3 orig, vec3 dir, float w) {
  	float tmin = 1.0;
    float tmax = 20.0;
	float s = 1.0;

    float t = tmin;
    for (int i = 0; i < 70 && t < tmax; i++) {
        vec3 pos = orig + dir * t;
        vec2 h = map(pos);

        s = min(s, 0.1 + 0.9 * h.x / (w * t));

        if (s < 0.0) {
            break;
        }

      	t += h.x;
    }

    s = max(s, 0.0);
    return s * s * (3.0 - 2.0 * s); // smoothstep
}


// Used to get moon position for water reflection
vec2 rayCastLight(vec3 orig, vec3 dir) {
    vec2 result = vec2(-1.0, -1.0);
    float tmin = 1.0;
    float tmax = 20.0;

    float t = tmin;
    for (int i = 0; i < 70 && t < tmax; i++) {
        vec3 pos = orig + dir * t;
        vec2 isect = mapLight(pos);
        if (isect.x < 0.0001) {
            result = vec2(t, isect.y);
            break;
        }
        t += isect.x;
    }

    return result;
}




// Based on: https://www.shadertoy.com/view/MdX3Rr
// Same as other ray casts but this time mapping the water
vec2 waterRayCast(vec3 orig, vec3 dir) {

    float tmin = 1.0;
    float tmax = 50.0;

    float t = tmin;
	for( int i=0; i<50; i++ )
	{
        vec3 pos = orig + t * dir;
        float h = mapWater(pos).x;
		if( abs(h)<(0.0015*t) || t>tmax ) break;
		t += 0.4*h;
	}

	return vec2(t, 2.0);
}



vec2 terrainRayCast(vec3 orig, vec3 dir) {
    float tmin = 1.0;
    float tmax = 50.0;

    float t = tmin;
    for(int i = 0; i < 50; i++) {
        vec3 pos = orig + t * dir;
        float h = pos.y - fbm3(vec2(pos.x, pos.z - 1.0) * 0.6) * 1.5;
        if( abs(h)<(0.015*t) || t>tmax ) break;
		t += 0.4*h;
    }

    return vec2(t, 3.0);
}


vec3 calculateNormals(vec3 pos)
{
	vec2 eps = vec2(0.0, 0.002*1.0);
	vec3 n = normalize(vec3(
	map(pos + eps.yxx).x - map(pos - eps.yxx).x,
	map(pos + eps.xyx).x - map(pos - eps.xyx).x,
	map(pos + eps.xxy).x - map(pos - eps.xxy).x));

	return n;
}


vec3 waterNormal(vec3 pos) {
    vec2 eps = vec2(0.0, 0.002*1.0);
	vec3 n = normalize(vec3(
	mapWater(pos + eps.yxx).x - mapWater(pos - eps.yxx).x,
	mapWater(pos + eps.xyx).x - mapWater(pos - eps.xyx).x,
	mapWater(pos + eps.xxy).x - mapWater(pos - eps.xxy).x));

	return n;
}

vec3 terrainNormal(vec3 pos) {
    vec2 eps = vec2(0.0, 0.002*1.0);
	vec3 n = normalize(vec3(
	mapTerrain(pos + eps.yxx).x - mapTerrain(pos - eps.yxx).x,
	mapTerrain(pos + eps.xyx).x - mapTerrain(pos - eps.xyx).x,
	mapTerrain(pos + eps.xxy).x - mapTerrain(pos - eps.xxy).x));

	return n;
}


// Based on: https://www.shadertoy.com/view/MlfXWH
vec3 skyCol = 2.5 * pow(vec3(30.0, 46.0, 64.0)/255.0, vec3(2.2));
vec3 moonCol = pow(vec3(180.0, 190.0, 210.0)/255.0, vec3(2.2));
vec3 skyColor(vec3 dir) {
    vec3 sundir = normalize(vec3(-0.5, 0.5, -1.0));
    vec3 col = skyCol;

    // Sky and moon glow and position
    col += max(0.0, -dir.z) * moonCol * pow(max(dot(sundir, dir), 0.0), 16.0);
    vec2 moonPos = dir.xy/dir.z - sundir.xy/sundir.z;

    // Add stars
    col = mix(col, vec3(1.0, 1.0, 1.0) * 30.0, clamp(rand(dir.xy) - 0.98, 0.0, 1.0) * smoothstep(0.0, 0.9, length(moonPos)));


    float randFbm = baseFbm(moonPos) * 1.5;

    //col = mix(col, vec3(1.65), max(0.0, -dir.z)*rand*smoothstep(0.37, 0.35, length(moonPos)));

    // Add moon
    // Smoothstep makes sure only the circle of the moon gets affected by the color below.
    // Rand value creates the texture of the moon
    col = mix(col, vec3(1.8), randFbm * smoothstep(0.37, 0.35, length(moonPos)));



    return col;
}


// Calculate lighthouse colors
vec3 computeMaterial(float obj, vec3 p, vec3 n, vec3 light, vec3 view) {

    vec3 color = vec3(0.0, 0.0, 0.0);

    if (obj == 0.0) {
        color = vec3(0.6,0.2,0.1);

        vec2 q = vec2(0.0);
        vec2 r = vec2(0.0);

        color = mix( vec3(0.6,0.2,0.1), vec3(0.3,0.05,0.05), fbm5(p.xy));

        // Warped fbm
        vec2 q2 = vec2( fbm5( p.xy + vec2(0.0,0.0) ), fbm5( p.xy + vec2(5.2,1.3) ) );

        float f = fbm5( p.xy + 3.0*q2 );
        color = mix(color, color * vec3(0.8, 0.6, 0.4), f);
    }
    else if (obj == 1.0) {
        color = vec3(1.0, 1.0, 1.0); // * max(0.0, dot(n, light)); // * shadow(light, p, 0.1);
        float pat = fbm5(p.xy);
        color = mix( vec3(1.0, 1.0, 1.0), vec3(190.0,170.0,140.0) / 255.0, pat);

        // Warped fbm
        vec2 q2 = vec2( fbm5( p.xy + vec2(0.0,0.0) ), fbm5( p.xy + vec2(5.2,1.3) ) );

        float f = fbm5( p.xy + 3.0*q2 );
        color = mix(color, color * vec3(1.0, 0.95, 0.85), f);
    }


  	return color;
}




// From: https://www.shadertoy.com/view/XdsGDB
// Calculate the reflections of the water by getting the intersection from the
// water normal to the element being reflected
vec3 shadeOcean(vec3 pos, vec3 ray, vec2 fragCoord, vec3 dir) {
    vec3 norm = waterNormal(pos);
    float ndotr = dot(ray, norm);
    float fresnel = pow(1.0 - abs(ndotr), 5.0);

    vec3 reflectedRay = ray - 2.0 * norm * ndotr;
    vec3 refractedRay = ray + (-cos(1.33 * acos(-ndotr)) - ndotr) * norm;
    refractedRay = normalize(refractedRay);

    const float crackFudge = 0.0;

    // reflection
    vec3 reflection = skyColor(dir);


    // Calculate base reflection
    float t = terrainRayCast(pos - crackFudge * reflectedRay, reflectedRay).x;


    if (t > 0.0) {
        vec3 post = pos + (t - crackFudge) * reflectedRay;
        reflection = mix(vec3(1.0, 1.0, 1.0), vec3(0.5, 0.2, 0.2), fbm3(vec2(post.x, post.z - 1.0) * 0.6) * 1.5 + 0.2); // terrain color, will change later
    }

    vec3 col = vec3(0.0,.04,.04); // under-sea color
    col = 2.5 * pow(vec3(40.0, 60.0, 78.0)/255.0, vec3(2.2));
    if ( t > 0.0 )
	{
        vec3 post = pos + (t - crackFudge) * reflectedRay;
	}

    col = mix( col, reflection, fresnel * 0.8 );


    // Calculate reflection caused by moon
    reflection = skyColor(dir);
    float t2 = rayCastLight(pos - crackFudge * reflectedRay, reflectedRay).x;

    if (t2 > 0.0) {
        vec3 post = pos + (t2 - crackFudge) * reflectedRay;
        reflection = mix(vec3(1.0, 1.0, 1.0), vec3(0.5, 0.2, 0.2), 0.0); // terrain color, will change later
    }

    if ( t2 > 0.0 )
	{
        vec3 post = pos + (t2 - crackFudge) * reflectedRay;
	}

    col = mix( col, reflection, clamp(0.0, 0.8, fresnel * 3.0));


    return col;
}




// From: https://www.shadertoy.com/view/Xds3zNs
mat3 setCamera( in vec3 ro, in vec3 ta, float cr )
{
	vec3 cw = normalize(ta-ro);
	vec3 cp = vec3(sin(cr), cos(cr),0.0);
	vec3 cu = normalize( cross(cw,cp) );
	vec3 cv =          ( cross(cu,cw) );
    return mat3( cu, cv, cw );
}




void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Position of the light source:
    vec3 lightPos = vec3(0.0, 2.5, -0.5);
    vec3 lightPos2 = vec3(6.0, 4.0, 2.0);


    vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y;

    // Calculate camera position/direction.
    vec3 ta = vec3( 0.0, 0.0, 0.0 );
    vec3 ro = ta + vec3( 4.5, 1.0 + 2.0, 4.5 );
    mat3 ca = setCamera( ro, ta, 0.0);
    vec3 rd = ca * normalize( vec3(p,2.5) );

    vec3 dir = normalize(vec3(p, -1.0));


    // Initial color is the sky color
    vec3 col = skyColor(dir);

    // Check intersections
    vec2 terrainIsect = terrainRayCast(ro, rd);
    vec2 waterIsect = waterRayCast(ro, rd);

    // Terrain
    if (terrainIsect.x < waterIsect.x && p.x > 0.1 && ((p.y > -0.8 && p.y < 0.0) || (p.y > 0.0 && p.x > 0.5))) {
        if (terrainIsect.x < 10.0) {
            vec3 post = ro + terrainIsect.x * rd;

            // Terrain color
            vec3 li = normalize(vec3(-2.0, 2.0, -4.0));
            vec3 nor = terrainNormal(post);
            float r = max(dot(nor, li), 0.05) / 2.0;
            float k = mapTerrain(post).x;

            vec3 col1 =vec3(r * k * 1.4, r * k * 1.1, r * k);
            col = 0.1 + col1 * 9.0;

            col = mix(col, col * vec3(1.5, 1.6, 1.7), fbm5(post.xy));


            // Shadow from the lighthouse
            vec3 lightPos4 = vec3(-0.8, 9.0, -0.5);

            vec3 rayDirection = normalize(lightPos4 - post);
            float l = length(lightPos4 - post);


            float lightSize = 0.05 + 0.04*sin(0.7);
            float shadow = rayCastShadow(post, rayDirection, lightSize);


            // Make shadow lighter
            col = mix(col, col * vec3(shadow), 0.75);

            float dif = clamp( dot( nor, rayDirection ), 0.0, 1.0 ) * shadow;

            if (shadow < 1.0) {
            }

        }
    }


    // Water
    else if (waterIsect.x < 10.0) {
        vec3 pos = ro + waterIsect.x * rd;
        col = shadeOcean(pos, rd, fragCoord, dir);

    }



    // Distance fog
    vec3 p2 = ro + 5.0 * rd;
    vec3 fogCol = skyCol * vec3(1.4, 1.5, 1.6);
    vec2 moonFogPos = vec2(-0.5, 0.50);
    if (p2.y >= 1.30 && p2.y < 1.50) {
        float h = (p2.y - 1.30) * 5.0;
        vec3 col1 = mix( col, fogCol, h );
        col1 = mix( col1, fogCol, h*h*h );

        vec3 col2 = mix( col, vec3(1.0, 1.0, 1.0), h );
        col2 = mix( col2, vec3(1.0, 1.0, 1.0), h*h*h );
        float lightIntensity = 1.0 / (10.0 * distance(p, moonFogPos));

        col = mix(col1, col2, lightIntensity);
    }
    if (p2.y >= 1.50 && p2.y < 1.70) {
        float h = 1.0 - (p2.y - 1.50) * 5.0;
        vec3 col1 = mix( col, fogCol, h );
        col1 = mix( col1, fogCol, h*h*h );

        vec3 col2 = mix( col, vec3(1.0, 1.0, 1.0), h );
        col2 = mix( col2, vec3(1.0, 1.0, 1.0), h*h*h );
        float lightIntensity = 1.0 / (10.0 * distance(p, moonFogPos));

        col = mix(col1, col2, lightIntensity);
    }



    // Lighthouse
    vec2 isect = rayCast(ro, rd);
    if (isect.x > 0.0001 && isect.x < terrainIsect.x) {
        vec3 pos = ro + isect.x * rd;


        vec3 nor = calculateNormals(pos);
        vec3 lightDir = normalize(lightPos - pos);

        if (isect.y != 2.0) {
        	col = computeMaterial(isect.y, pos, nor, lightDir, normalize(ro - pos));
        }


        // From: https://www.iquilezles.org/www/articles/outdoorslighting/outdoorslighting.htm
        // Use: normalize(lightPos2 - pos) instead of lightDir to see lightHouse better
        float sun = clamp( dot( nor, lightDir), 0.0, 1.0 );

        // compute lighting
        vec3 lin  = sun * vec3(1.64,1.27,0.99);
        lin += skyCol * vec3(0.16,0.20,0.28);

        // multiply lighting and materials
        vec3 color = col * lin;


        // gamma correction
        color = pow( color, vec3(1.0/2.2) );

        // Glow inside glass
        if (isect.y == 2.0) {
            sun = clamp( dot( nor, normalize(lightPos2 - pos)), 0.0, 1.0 );
            lin  = sun * vec3(1.64,1.27,0.99);
            vec3 color2 = col * lin;
            color2 = pow( color2, vec3(1.0/1.5) );
            color = color + color2;
        }

        // display
        col = color;


        // Specular in the side of the lighthouse
        float diffuse = max(0.0, dot(lightDir, nor)) / 1.2;
      	float specular = pow(diffuse, 2.);

      	col += vec3(diffuse * col + specular*2.9);
    }



    // From: https://www.shadertoy.com/view/MdyGzR
    // Set point in the screen where light is and set intensity based on distance to p
    vec3 lightPos3 = vec3(0.86, 0.57, 0.0);
    vec3 lightColor = mix (vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0), sin(iTime));
    float lighIntensity = 1.0 / (50.0 * distance(p, lightPos3.xy));

    col += lighIntensity*lightColor;

    // Output to screen
    fragColor = vec4(col, 1.0);
}
